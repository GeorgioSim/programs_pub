# include <math.h>
# include <stdlib.h>
# include <stdio.h>
ONE-DIMENSIONAL SIMULATION WITH THE FDTD METHOD 15
#define KE 200
main ()
{
float ex[KE],hy[KE];
int n,k,kc,ke,NSTEPS;
float ddx,dt,T;
float t0,spread,pulse;
FILE *fp, *fopen();
/* Initialize */
for ( k=1; k < KE; k++ )
{ ex[k] = 0.;
hy[k] = 0.;
}
kc = KE/2;
t0 = 40.0;
spread = 12;
T = 0;
NSTEPS = 1;
while ( NSTEPS > 0 ) {
printf( "NSTEPS -- > ");
scanf("%d", &NSTEPS);
printf("%d \ n", NSTEPS);
n= 0;
for ( n=1; n <=NSTEPS ; n++)
{
T = T + 1;
/* Main FDTD Loop */
/* Calculate the Ex field */
for ( k=1; k < KE; k++ )
{ ex[k] = ex[k] + .5*( hy[k-1] - hy[k] ) ; }
/* Put a Gaussian pulse in the middle */
pulse = exp(-.5*(pow( (t0-T)/spread,2.0) ));
ex[kc] = pulse;
printf( "%5.1f %6.2f \ n",t0-T,ex[kc]);
/* Calculate the Hy field */
for ( k=0; k < KE-1; k++ )
{ hy[k] = hy[k] + .5*( ex[k] - ex[k+1] ) ; }
16 ONE-DIMENSIONAL SIMULATION WITH THE FDTD METHOD
}
/* End of the Main FDTD Loop */
/* At the end of the calculation, print out
the Ex and Hy fields */
for ( k=1; k <= KE; k++ )
{ printf( "%3d %6.2f %6.2f \ n",k,ex[k],hy[k]); }
/* Write the E field out to a file "Ex" */
fp = fopen( "Ex","w");
for ( k=1; k <= KE; k++ )
{ fprintf( fp," %6.2f \ n",ex[k]); }
fclose(fp);
/* Write the H field out to a file "Hy" */
fp = fopen( "Hy","w");
for ( k=1; k <= KE; k++ )
{ fprintf( fp," %6.2f \ n",hy[k]); }
fclose(fp);
printf( "T = %5.0f \ n",T);
}
}
/* FD1D_1.2.C. 1D FDTD simulation in free space */
/* Absorbing Boundary Condition added */
main ()
{
float ex[KE],hy[KE];
float ex_low_m1,ex_low_m2,ex_high_m1,ex_high_m2;
for ( n=1; n <=NSTEPS ; n++)
{
T = T + 1;
/* Main FDTD Loop */
/* Calculate the Ex field */
for ( k=1; k < KE; k++ )
{ ex[k] = ex[k] + .5*( hy[k-1] - hy[k] ) ; }
/* Put a Gaussian pulse in the middle */
pulse = exp(-.5*(pow( (t0-T)/spread,2.0) ));
ex[kc] = ex[kc] + pulse;
printf( "%5.1f %6.2f %6.2f \ n",t0-T,arg,ex[kc]);
ONE-DIMENSIONAL SIMULATION WITH THE FDTD METHOD 17
/* Absorbing Boundary Conditions */
ex[0] = ex_low_m2;
ex_low_m2 = ex_low_m1;
ex_low_m1 = ex[1];
ex[KE-1] = ex_high_m2;
ex_high_m2 = ex_high_m1;
ex_high_m1 = ex[KE-2];
/* Calculate the Hy field */
for ( k=0; k < KE-1; k++ )
{ hy[k] = hy[k] + .5*( ex[k] - ex[k+1] ) ; }
}
/* End of the Main FDTD Loop */
/* FD1D_1.3.c.
/* Simulation of a pulse hitting a dielectric medium */
main ()
{
float ex[KE],hy[KE];
float cb[KE];
int n,k,kc,ke,kstart,nsteps;
float ddx,dt,T,epsz,epsilon,sigma,eaf;
float t0,spread,pi,pulse;
FILE *fp, *fopen();
float ex_low_m1,ex_low_m2,ex_high_m1,ex_high_m2;
for ( k=1; k <= KE; k++ ) { /* Initialize to free space */
cb[k] = .5;
}
printf( "Dielectric starts at --> ");
scanf("%d", &kstart);
printf( "Epsilon --> ");
scanf("%f", &epsilon);
printf("%d %6.2f \ n", kstart,epsilon);
for ( k=kstart; k <= KE; k++ ) {
cb[k] = .5/epsilon;
}
for ( k=1; k <= KE; k++ )
{ printf( "%2d %4.2f \ n",k,cb[k]); }
/* Main part of the program */
18 ONE-DIMENSIONAL SIMULATION WITH THE FDTD METHOD
while ( nsteps > 0 ) {
printf( "nsteps --> ");
scanf("%d", &nsteps);
printf("%d \ n", nsteps);
for ( n=1; n <=nsteps ; n++)
{
T = T + 1;
/* Calculate the Ex field */
for ( k=0; k < KE; k++ )
{ ex[k] = ex[k] + cb[k]*( hy[k-1] - hy[k] ) ; }
/* Put a Gaussian pulse at the low end */
pulse = exp(-.5*(pow((t0-T)/spread,2.0)));
ex[5] = ex[5] + pulse;
printf( "%5.1f %6.2f %6.2f \ n",T,pulse,ex[5]);
/* FD1D_1.4.c.
/* Simulation of a sinusoidal wave hitting a dielectric
medium */
# include <math.h>
# include <stdlib.h>
# include <stdio.h>
#define KE 200
main ()
{
float ddx,dt;
float freq_in;
ddx = .01; /* Cells size */
dt =ddx/6e8; /* Time steps */
/* These parameters specify the input */
printf( "Input freq (MHz)--> ");
scanf("%f", &freq_in);
freq_in = freq_in*1e6;
printf(" %8.0f \ n", freq_in);
T = 0;
nsteps = 1;
/* Main part of the program */
ONE-DIMENSIONAL SIMULATION WITH THE FDTD METHOD 19
while ( nsteps > 0 ) {
printf( "nsteps --> ");
scanf("%d", &nsteps);
printf("%d \ n", nsteps);
for ( n=1; n <=nsteps ; n++)
{
T = T + 1;
/* Calculate the Ex field */
for ( k=0; k < KE; k++ )
{ ex[k] = ex[k] + cb[k]*( hy[k-1] - hy[k] ) ; }
/* Put a Gaussian pulse at the low end */
pulse = sin(2*pi*freq_in*dt*T);
ex[5] = ex[5] + pulse;
printf( "%5.1f %6.2f %6.2f \ n",T,pulse,ex[5]);
/* FD1D_1.5.c. Simulation of a sinusoid hitting a lossy
dielectric medium */
{
float ca[KE],cb[KE];
/* Initialize to free space */
for ( k=0; k <= KE; k++ ) {
ca[k] = 1.;
cb[k] = .5;
}
printf( "Dielectric starts at --> ");
scanf("%d", &kstart);
printf( "Epsilon --> ");
scanf("%f", &epsilon);
printf( "Conductivity --> ");
scanf("%f", &sigma);
printf("%d %6.2f %6.2f \ n", kstart,epsilon, sigma);
eaf = dt*sigma/(2*epsz*epsilon);
printf(" %6.4f \ n", eaf);
for ( k=kstart; k >= KE; k++ ) {
ca[k] = (1. - eaf)/(1 + eaf) ;
cb[k] = .5/(epsilon*(1 + eaf) );
}
/* Main part of the program */
/* Calculate the Ex field */
for ( k=0; k < KE; k++ )
{ ex[k] = ca[k]*ex[k] + cb[k]*( hy[k-1] - hy[k] ) ; }